import { beginCell, contractAddress, toNano, Cell, Address, TonClient4, WalletContractV4 } from "@ton/ton";
import { deploy } from "./utils/deploy";
import { printAddress, printDeploy, printHeader } from "./utils/print";
import * as fs from "fs";
import { getHttpEndpoint } from "@orbs-network/ton-access";
import { mnemonicToWalletKey } from "ton-crypto";
import * as dotenv from "dotenv";
dotenv.config();
// ================================================================= //
import { VoucherCollection, MintByOwner } from "./output/MM-NFT_VoucherCollection";
// ================================================================= //


// –õ–û–ì–ò–ö–ê:
// 1. –Æ–∑–µ—Ä –∂–º–µ—Ç "–∫—É–ø–∏—Ç—å"
// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à –±–∞–ª–∞–Ω—Å (–º–∏–Ω—Ç –∑–∞ –Ω–∞—à —Å—á–µ—Ç), –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω—Ñ—Ç –µ—â–µ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏
// 3. –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞ –Ω–∞ –±—ç–∫–µ
// 4. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω—Ç
// 5. –ñ–¥–µ–º, –ø–æ–∫–∞ —Ç—Ä–∞–Ω–∑–∞ –ø—Ä–æ–π–¥–µ—Ç
// 6. –°–º–æ—Ç—Ä–∏–º, —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–§–¢ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
//   6.1. –ï—Å–ª–∏ –¥–∞ -- –≥–æ–≤–æ—Ä–∏–º –±—ç–∫—É, —á—Ç–æ —É –Ω–∞—Å –≤—Å–µ –æ–∫
//   6.2. –ï—Å–ª–∏ –Ω–µ—Ç -- –≥–æ–≤–æ—Ä–∏–º –±—ç–∫—É, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏ –Ω–∞–¥–æ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ —é–∑–µ—Ä—É
// 7. –ì–æ—Ç–æ–≤–æ 
 

let user_address = Address.parse("UQBtQoMmK74ty03hcCicDUVNtVc9DhyT-_LLgDqZ57iD_VHF"); //–ø–æ–ª—É—á–∞–µ–º —Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ tonconnect


const MintMsg: MintByOwner= {
  $$type: 'MintByOwner',
  mint_to: user_address  
};

const delay = (ms: number)  => new Promise(res => setTimeout(res, ms));

(async () => {
    const client = new TonClient4({
        // endpoint: "https://mainnet-v4.tonhubapi.com", // üî¥ Main-net API endpoint
        endpoint: "https://sandbox-v4.tonhubapi.com", // üî¥ Test-net API endpoint
    });

    // Parameters
    let collection_address = Address.parse("EQDAlAI6ZGe7xTBELbenPM4bnkMyb28bBVCg21TZM7cGKSWA"); //–∞–¥—Ä–µ—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –≤—ã–Ω–æ—Å–∏–º –≤ .–µ–Ω–≤

    let contract_address = await VoucherCollection.fromAddress(collection_address);
    let client_open = client.open(contract_address);

const collectiondata = await client_open.getGetCollectionData()
const index = Number(collectiondata.next_item_index)


let totalSupply = 1000  //—Ç–æ–∂–µ –≤ .–µ–Ω–≤. –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–§–¢, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –≤—ã–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–≤—ã—Å—Ç–∞–≤–∏–ª 1000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
if (index <= totalSupply) {


    let mnemonic = (process.env.mnemonics || "").toString(); //–∑–∞–≥—Ä—É–∂–∞–µ–º —Å .–µ–Ω–≤ —Ñ—Ä–∞–∑—É –∫–æ—à–µ–ª—å–∫–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ø–ª–æ–∏–ª–∏
    const key = await mnemonicToWalletKey(mnemonic.split(" ")); 
    const wallet = WalletContractV4.create({ publicKey: key.publicKey, workchain: 0 });
   
  
    // open wallet and read the current seqno of the wallet
    const walletContract = client.open(wallet);
    const walletSender = walletContract.sender(key.secretKey);
   let balance = await walletContract.getBalance() //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à –±–∞–ª–∞–Ω—Å (–Ω—É–∂–Ω–æ 0.3, —á—Ç–æ–±—ã —Ç—Ä–∞–Ω–∑–∞ –ø—Ä–æ—à–ª–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º)
   
   
   if (balance >= toNano(0.3)) {

    //–∑–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–æ—Ä–∑–∫–∏ –¥–µ–Ω–µ–≥ —é–∑–µ—Ä–∞ –Ω–∞ –±—ç–∫–µ

    await client_open.send(walletSender, { value: toNano(0.3), bounce: false }, MintMsg); //—Å–∞–º–∞ —Ç—Ä–∞–Ω–∑–∞ –Ω–∞ –º–∏–Ω—Ç

    //—è –Ω–µ —É–≤–µ—Ä–µ–Ω, –º–æ–∂–Ω–æ –ª–∏ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
    await delay(45000) //–∂–¥–µ–º, –ø–æ–∫–∞ –ø—Ä–æ–π–¥–µ—Ç —Ç—Ä–∞–Ω–∑–∞

    const newdata = await client_open.getGetCollectionData() //–ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const newindex = Number(newdata.next_item_index)


  
     if (newindex > index) {
      //–∑–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±—ç–∫—É, —á—Ç–æ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ
      console.log("Success")
     } else {
      //–∑–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ 
      console.log("Fail")
     }



   } else {
console.log("Insufficient balance of deployer's wallet")
 }
  
} else {
  console.log("Maximum amount of NFT minted :(")
}

})();